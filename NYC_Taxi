{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ce397d9e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "papermill": {
     "duration": 0.938636,
     "end_time": "2024-04-21T19:29:00.438437",
     "exception": false,
     "start_time": "2024-04-21T19:28:59.499801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "./0-read-parquet.ipynb\n",
      "./yellow_tripdata_2017-01.parquet\n",
      "./yellow_tripdata_2017-02.parquet\n",
      "./yellow_tripdata_2017-03.parquet\n",
      "./yellow_tripdata_2017-04.parquet\n",
      "./yellow_tripdata_2017-05.parquet\n",
      "./yellow_tripdata_2017-06.parquet\n",
      "./yellow_tripdata_2017-07.parquet\n",
      "./yellow_tripdata_2017-08.parquet\n",
      "./yellow_tripdata_2017-09.parquet\n",
      "./yellow_tripdata_2017-10.parquet\n",
      "./yellow_tripdata_2017-11.parquet\n",
      "./yellow_tripdata_2017-12.parquet\n",
      "./.ipynb_checkpoints\\0-read-parquet-checkpoint.ipynb\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('./'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5734bb85-2636-4c62-a87b-bbcd15e060cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\abdullahasif9000\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "print(sys.executable)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f4edba77",
   "metadata": {
    "papermill": {
     "duration": 0.268063,
     "end_time": "2024-04-21T19:29:00.709998",
     "exception": false,
     "start_time": "2024-04-21T19:29:00.441935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+-----+\n",
      "|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|airport_fee|Month|\n",
      "+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+-----+\n",
      "|       1| 2017-01-01 00:32:05|  2017-01-01 00:37:48|              1|          1.2|         1|                 N|         140|         236|           2|        6.5|  0.5|    0.5|       0.0|         0.0|                  0.3|         7.8|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:43:25|  2017-01-01 00:47:42|              2|          0.7|         1|                 N|         237|         140|           2|        5.0|  0.5|    0.5|       0.0|         0.0|                  0.3|         6.3|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:49:10|  2017-01-01 00:53:53|              2|          0.8|         1|                 N|         140|         237|           2|        5.5|  0.5|    0.5|       0.0|         0.0|                  0.3|         6.8|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:36:42|  2017-01-01 00:41:09|              1|          1.1|         1|                 N|          41|          42|           2|        6.0|  0.5|    0.5|       0.0|         0.0|                  0.3|         7.3|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:07:41|  2017-01-01 00:18:16|              1|          3.0|         1|                 N|          48|         263|           2|       11.0|  0.5|    0.5|       0.0|         0.0|                  0.3|        12.3|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:20:52|  2017-01-01 00:24:59|              2|          0.7|         1|                 N|         236|         262|           2|        5.0|  0.5|    0.5|       0.0|         0.0|                  0.3|         6.3|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:33:49|  2017-01-01 00:42:38|              2|          1.6|         1|                 N|         236|         238|           1|        8.0|  0.5|    0.5|      1.85|         0.0|                  0.3|       11.15|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:48:22|  2017-01-01 00:52:15|              2|          0.6|         1|                 N|         238|         239|           1|        5.0|  0.5|    0.5|      1.25|         0.0|                  0.3|        7.55|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:57:12|  2017-01-01 01:06:28|              2|          1.0|         1|                 N|         239|          48|           1|        7.5|  0.5|    0.5|      1.75|         0.0|                  0.3|       10.55|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:10:25|  2017-01-01 00:29:06|              1|          1.0|         1|                 N|         246|          48|           2|       12.0|  0.5|    0.5|       0.0|         0.0|                  0.3|        13.3|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:38:28|  2017-01-01 01:30:55|              4|          2.5|         1|                 N|          48|         162|           2|       29.0|  0.5|    0.5|       0.0|         0.0|                  0.3|        30.3|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:26:17|  2017-01-01 00:32:28|              3|          1.1|         1|                 N|         114|          79|           2|        6.0|  0.5|    0.5|       0.0|         0.0|                  0.3|         7.3|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:41:27|  2017-01-01 01:03:35|              2|          3.3|         1|                 N|         114|         161|           2|       16.0|  0.5|    0.5|       0.0|         0.0|                  0.3|        17.3|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:23:12|  2017-01-01 00:41:32|              2|          1.9|         1|                 N|         263|         161|           1|       13.0|  0.5|    0.5|      2.85|         0.0|                  0.3|       17.15|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:46:17|  2017-01-01 00:55:43|              2|          0.5|         1|                 N|         161|         161|           1|        7.5|  0.5|    0.5|       1.0|         0.0|                  0.3|         9.8|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:59:15|  2017-01-01 01:13:33|              2|          2.8|         1|                 N|         163|         145|           1|       12.5|  0.5|    0.5|      2.75|         0.0|                  0.3|       16.55|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:08:23|  2017-01-01 00:21:33|              1|          1.9|         1|                 N|         161|         140|           1|       10.5|  0.5|    0.5|       2.0|         0.0|                  0.3|        13.8|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:23:13|  2017-01-01 00:34:48|              1|          3.0|         1|                 N|         140|         224|           1|       12.0|  0.5|    0.5|      2.65|         0.0|                  0.3|       15.95|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:39:18|  2017-01-01 00:49:08|              1|          1.1|         1|                 N|         107|         186|           2|        7.5|  0.5|    0.5|       0.0|         0.0|                  0.3|         8.8|                NULL|       NULL|   01|\n",
      "|       1| 2017-01-01 00:52:32|  2017-01-01 01:09:51|              1|          1.3|         1|                 N|         186|         170|           1|       11.5|  0.5|    0.5|       1.0|         0.0|                  0.3|        13.8|                NULL|       NULL|   01|\n",
      "+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import lit\n",
    "\n",
    "# Initialize Spark Session\n",
    "spark = SparkSession.builder.appName(\"NYC Taxi Data Analysis\").getOrCreate()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0ee8511-90fd-4774-b61e-fa66933575a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# List of file paths (assuming these files are available in your Databricks file system)\n",
    "file_paths = [\n",
    "    \"./yellow_tripdata_2017-01.parquet\",\n",
    "    \"./yellow_tripdata_2017-02.parquet\",\n",
    "    \"./yellow_tripdata_2017-03.parquet\",\n",
    "    \"./yellow_tripdata_2017-04.parquet\",\n",
    "    \"./yellow_tripdata_2017-05.parquet\",\n",
    "    \"./yellow_tripdata_2017-06.parquet\",\n",
    "    \"./yellow_tripdata_2017-07.parquet\",\n",
    "    \"./yellow_tripdata_2017-08.parquet\",\n",
    "    \"./yellow_tripdata_2017-09.parquet\",\n",
    "    \"./yellow_tripdata_2017-10.parquet\",\n",
    "    \"./yellow_tripdata_2017-11.parquet\",\n",
    "    \"./yellow_tripdata_2017-12.parquet\"\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e21f13a-280b-4257-8306-ead0365ad5ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Empty DataFrame to store combined data\n",
    "combined_df = None\n",
    "\n",
    "# Loop through each file, load the data, add the month column, and append to the combined DataFrame\n",
    "for file_path in file_paths:\n",
    "    month = file_path.split(\"-\")[1][:2]  # Extract month from filename\n",
    "    df = spark.read.parquet(file_path)  # Load Parquet file\n",
    "    df = df.withColumn(\"Month\", lit(month))  # Add month column\n",
    "    \n",
    "    # Combine the data\n",
    "    if combined_df is None:\n",
    "        combined_df = df\n",
    "    else:\n",
    "        combined_df = combined_df.union(df)\n",
    "\n",
    "# Show some data to verify\n",
    "combined_df.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "07893417",
   "metadata": {
    "papermill": {
     "duration": 0.62075,
     "end_time": "2024-04-21T19:29:01.334045",
     "exception": false,
     "start_time": "2024-04-21T19:29:00.713295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['VendorID',\n",
       " 'tpep_pickup_datetime',\n",
       " 'tpep_dropoff_datetime',\n",
       " 'passenger_count',\n",
       " 'trip_distance',\n",
       " 'RatecodeID',\n",
       " 'store_and_fwd_flag',\n",
       " 'PULocationID',\n",
       " 'DOLocationID',\n",
       " 'payment_type',\n",
       " 'fare_amount',\n",
       " 'extra',\n",
       " 'mta_tax',\n",
       " 'tip_amount',\n",
       " 'tolls_amount',\n",
       " 'improvement_surcharge',\n",
       " 'total_amount',\n",
       " 'congestion_surcharge',\n",
       " 'airport_fee',\n",
       " 'Month']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_df.columns\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f7778a37-e0ca-42e7-bea5-a3afd43f7644",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = combined_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "73f02462",
   "metadata": {
    "papermill": {
     "duration": 0.066823,
     "end_time": "2024-04-21T19:29:01.410581",
     "exception": false,
     "start_time": "2024-04-21T19:29:01.343758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Calculate CO2 emissions for each ride\n",
    "from pyspark.sql.functions import col, date_trunc, lit\n",
    "df = df.withColumn(\"Fuel_Consumed\", col(\"trip_distance\") / 22)  # gallons of fuel consumed per trip\n",
    "df = df.withColumn(\"CO2_Emissions\", col(\"Fuel_Consumed\") * 8.89)  # kg of CO2 emitted per trip\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ff8dbf2d-0b68-492a-b7f4-89e72a269a58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+-----+--------------------+-------------------+-------------------+\n",
      "|VendorID|tpep_pickup_datetime|tpep_dropoff_datetime|passenger_count|trip_distance|RatecodeID|store_and_fwd_flag|PULocationID|DOLocationID|payment_type|fare_amount|extra|mta_tax|tip_amount|tolls_amount|improvement_surcharge|total_amount|congestion_surcharge|airport_fee|Month|       Fuel_Consumed|      CO2_Emissions|        Pickup_Date|\n",
      "+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+-----+--------------------+-------------------+-------------------+\n",
      "|       1| 2017-01-01 00:32:05|  2017-01-01 00:37:48|              1|          1.2|         1|                 N|         140|         236|           2|        6.5|  0.5|    0.5|       0.0|         0.0|                  0.3|         7.8|                NULL|       NULL|   01| 0.05454545454545454| 0.4849090909090909|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:43:25|  2017-01-01 00:47:42|              2|          0.7|         1|                 N|         237|         140|           2|        5.0|  0.5|    0.5|       0.0|         0.0|                  0.3|         6.3|                NULL|       NULL|   01|0.031818181818181815| 0.2828636363636364|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:49:10|  2017-01-01 00:53:53|              2|          0.8|         1|                 N|         140|         237|           2|        5.5|  0.5|    0.5|       0.0|         0.0|                  0.3|         6.8|                NULL|       NULL|   01| 0.03636363636363637| 0.3232727272727273|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:36:42|  2017-01-01 00:41:09|              1|          1.1|         1|                 N|          41|          42|           2|        6.0|  0.5|    0.5|       0.0|         0.0|                  0.3|         7.3|                NULL|       NULL|   01|                0.05|0.44450000000000006|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:07:41|  2017-01-01 00:18:16|              1|          3.0|         1|                 N|          48|         263|           2|       11.0|  0.5|    0.5|       0.0|         0.0|                  0.3|        12.3|                NULL|       NULL|   01| 0.13636363636363635| 1.2122727272727272|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:20:52|  2017-01-01 00:24:59|              2|          0.7|         1|                 N|         236|         262|           2|        5.0|  0.5|    0.5|       0.0|         0.0|                  0.3|         6.3|                NULL|       NULL|   01|0.031818181818181815| 0.2828636363636364|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:33:49|  2017-01-01 00:42:38|              2|          1.6|         1|                 N|         236|         238|           1|        8.0|  0.5|    0.5|      1.85|         0.0|                  0.3|       11.15|                NULL|       NULL|   01| 0.07272727272727274| 0.6465454545454546|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:48:22|  2017-01-01 00:52:15|              2|          0.6|         1|                 N|         238|         239|           1|        5.0|  0.5|    0.5|      1.25|         0.0|                  0.3|        7.55|                NULL|       NULL|   01| 0.02727272727272727|0.24245454545454545|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:57:12|  2017-01-01 01:06:28|              2|          1.0|         1|                 N|         239|          48|           1|        7.5|  0.5|    0.5|      1.75|         0.0|                  0.3|       10.55|                NULL|       NULL|   01|0.045454545454545456| 0.4040909090909091|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:10:25|  2017-01-01 00:29:06|              1|          1.0|         1|                 N|         246|          48|           2|       12.0|  0.5|    0.5|       0.0|         0.0|                  0.3|        13.3|                NULL|       NULL|   01|0.045454545454545456| 0.4040909090909091|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:38:28|  2017-01-01 01:30:55|              4|          2.5|         1|                 N|          48|         162|           2|       29.0|  0.5|    0.5|       0.0|         0.0|                  0.3|        30.3|                NULL|       NULL|   01| 0.11363636363636363| 1.0102272727272728|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:26:17|  2017-01-01 00:32:28|              3|          1.1|         1|                 N|         114|          79|           2|        6.0|  0.5|    0.5|       0.0|         0.0|                  0.3|         7.3|                NULL|       NULL|   01|                0.05|0.44450000000000006|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:41:27|  2017-01-01 01:03:35|              2|          3.3|         1|                 N|         114|         161|           2|       16.0|  0.5|    0.5|       0.0|         0.0|                  0.3|        17.3|                NULL|       NULL|   01|                0.15| 1.3335000000000001|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:23:12|  2017-01-01 00:41:32|              2|          1.9|         1|                 N|         263|         161|           1|       13.0|  0.5|    0.5|      2.85|         0.0|                  0.3|       17.15|                NULL|       NULL|   01| 0.08636363636363636| 0.7677727272727274|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:46:17|  2017-01-01 00:55:43|              2|          0.5|         1|                 N|         161|         161|           1|        7.5|  0.5|    0.5|       1.0|         0.0|                  0.3|         9.8|                NULL|       NULL|   01|0.022727272727272728|0.20204545454545456|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:59:15|  2017-01-01 01:13:33|              2|          2.8|         1|                 N|         163|         145|           1|       12.5|  0.5|    0.5|      2.75|         0.0|                  0.3|       16.55|                NULL|       NULL|   01| 0.12727272727272726| 1.1314545454545455|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:08:23|  2017-01-01 00:21:33|              1|          1.9|         1|                 N|         161|         140|           1|       10.5|  0.5|    0.5|       2.0|         0.0|                  0.3|        13.8|                NULL|       NULL|   01| 0.08636363636363636| 0.7677727272727274|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:23:13|  2017-01-01 00:34:48|              1|          3.0|         1|                 N|         140|         224|           1|       12.0|  0.5|    0.5|      2.65|         0.0|                  0.3|       15.95|                NULL|       NULL|   01| 0.13636363636363635| 1.2122727272727272|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:39:18|  2017-01-01 00:49:08|              1|          1.1|         1|                 N|         107|         186|           2|        7.5|  0.5|    0.5|       0.0|         0.0|                  0.3|         8.8|                NULL|       NULL|   01|                0.05|0.44450000000000006|2017-01-01 00:00:00|\n",
      "|       1| 2017-01-01 00:52:32|  2017-01-01 01:09:51|              1|          1.3|         1|                 N|         186|         170|           1|       11.5|  0.5|    0.5|       1.0|         0.0|                  0.3|        13.8|                NULL|       NULL|   01| 0.05909090909090909| 0.5253181818181818|2017-01-01 00:00:00|\n",
      "+--------+--------------------+---------------------+---------------+-------------+----------+------------------+------------+------------+------------+-----------+-----+-------+----------+------------+---------------------+------------+--------------------+-----------+-----+--------------------+-------------------+-------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Convert pickup datetime to date type to facilitate daily aggregation\n",
    "df = df.withColumn(\"Pickup_Date\", date_trunc(\"day\", col(\"tpep_pickup_datetime\")))\n",
    "df.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ee7d811e-bddf-40d7-9b91-5e8b0534a30c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------+---------------+--------------------+\n",
      "|        Pickup_Date|passenger_count|     Total_Emissions|\n",
      "+-------------------+---------------+--------------------+\n",
      "|2017-01-01 00:00:00|              3|  21952.339659090805|\n",
      "|2017-01-09 00:00:00|              1|  256388.56981828672|\n",
      "|2017-01-20 00:00:00|              0|0.052531818181818186|\n",
      "|2017-01-18 00:00:00|              2|  50405.265527273565|\n",
      "|2017-01-06 00:00:00|              1|  255565.78011375343|\n",
      "|2017-01-06 00:00:00|              0|                 0.0|\n",
      "|2017-01-31 00:00:00|              1|   243378.7215682792|\n",
      "|2017-01-11 00:00:00|              5|  17673.768540909055|\n",
      "|2017-01-02 00:00:00|              0|                 0.0|\n",
      "|2017-01-13 00:00:00|              7|   7.544377272727274|\n",
      "|2017-01-17 00:00:00|              8|   9.762836363636364|\n",
      "|2017-01-12 00:00:00|              4|   6073.684368181821|\n",
      "|2017-01-27 00:00:00|              4|   7163.529672727258|\n",
      "|2017-01-09 00:00:00|              5|  17619.131409090784|\n",
      "|2017-01-05 00:00:00|              7|                 0.0|\n",
      "|2017-01-01 00:00:00|              1|  247980.73917278805|\n",
      "|2017-01-15 00:00:00|              0|   3.624695454545455|\n",
      "|2017-01-24 00:00:00|              6|   9952.197404545432|\n",
      "|2017-01-01 00:00:00|              6|  12685.823913636377|\n",
      "|2017-01-25 00:00:00|              2|  49086.292595455125|\n",
      "+-------------------+---------------+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Aggregate total CO2 emissions per day and by passenger group size\n",
    "daily_emissions = df.groupBy(\"Pickup_Date\", \"passenger_count\")\\\n",
    "                    .sum(\"CO2_Emissions\")\\\n",
    "                    .withColumnRenamed(\"sum(CO2_Emissions)\", \"Total_Emissions\")\n",
    "\n",
    "daily_emissions.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d631e36c-76e2-4a5e-b240-5a90e5b5a904",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------+------------------+\n",
      "|        Pickup_Date|   Total_Emissions|\n",
      "+-------------------+------------------+\n",
      "|2017-04-13 00:00:00| 347133.5155592112|\n",
      "|2017-09-07 00:00:00|332191.76120465895|\n",
      "|2017-11-19 00:00:00| 309585.7802546213|\n",
      "|2017-01-28 00:00:00|325561.87398647744|\n",
      "|2017-11-21 00:00:00| 291770.5516091839|\n",
      "|2017-01-27 00:00:00|341851.38870922977|\n",
      "|2017-02-12 00:00:00| 324528.5165500931|\n",
      "|2017-03-25 00:00:00|335655.76182738773|\n",
      "|2017-07-17 00:00:00|296554.01007280935|\n",
      "|2017-11-25 00:00:00|262409.73045005323|\n",
      "|2017-01-19 00:00:00| 326810.4300364786|\n",
      "|2017-02-23 00:00:00|336938.12412285374|\n",
      "|2017-03-22 00:00:00| 335547.3361546798|\n",
      "|2017-06-16 00:00:00|351017.00295468216|\n",
      "|2017-08-09 00:00:00| 295465.4699819057|\n",
      "|2018-04-30 00:00:00|2.4811181818181822|\n",
      "|2017-03-01 00:00:00|  345542.520750141|\n",
      "|2017-03-04 00:00:00| 359586.1992228824|\n",
      "|2017-05-14 00:00:00|332049.06054098875|\n",
      "|2018-04-09 00:00:00|2.6710409090909093|\n",
      "+-------------------+------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Filter data for visualization: 1-2 passengers vs 3+ passengers\n",
    "emissions_1_2 = daily_emissions.filter(col(\"passenger_count\").between(1, 2))\\\n",
    "                                .groupBy(\"Pickup_Date\")\\\n",
    "                                .sum(\"Total_Emissions\")\\\n",
    "                                .withColumnRenamed(\"sum(Total_Emissions)\", \"Total_Emissions\")\n",
    "\n",
    "emissions_1_2.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5512f5c6-11d2-4c5f-8db8-43a777a6f5aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------+------------------+\n",
      "|        Pickup_Date|   Total_Emissions|\n",
      "+-------------------+------------------+\n",
      "|2017-04-13 00:00:00|  59665.7279909087|\n",
      "|2017-09-07 00:00:00| 53018.08905909072|\n",
      "|2017-11-19 00:00:00| 53931.37088181787|\n",
      "|2017-01-28 00:00:00| 59089.78934090861|\n",
      "|2017-11-21 00:00:00| 46643.22765454521|\n",
      "|2017-01-27 00:00:00| 54746.33334545445|\n",
      "|2017-02-12 00:00:00| 55794.76741363616|\n",
      "|2017-03-25 00:00:00|61478.475768181226|\n",
      "|2017-07-17 00:00:00|   50940.419281818|\n",
      "|2017-11-25 00:00:00|  51750.5649818177|\n",
      "|2017-01-19 00:00:00|49822.065363636066|\n",
      "|2017-02-23 00:00:00|55614.377190908635|\n",
      "|2017-03-22 00:00:00| 51225.62664545433|\n",
      "|2017-06-16 00:00:00| 57327.43574090884|\n",
      "|2017-08-09 00:00:00| 51190.26464999984|\n",
      "|2017-03-01 00:00:00| 54004.52345909071|\n",
      "|2017-03-04 00:00:00| 63220.38236818127|\n",
      "|2017-05-14 00:00:00| 60049.98611818157|\n",
      "|2017-01-16 00:00:00|47065.741068181625|\n",
      "|2017-05-28 00:00:00| 50427.59154999968|\n",
      "+-------------------+------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "emissions_3_more = daily_emissions.filter(col(\"passenger_count\") >= 3)\\\n",
    "                                  .groupBy(\"Pickup_Date\")\\\n",
    "                                  .sum(\"Total_Emissions\")\\\n",
    "                                  .withColumnRenamed(\"sum(Total_Emissions)\", \"Total_Emissions\")\n",
    "emissions_3_more.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "925cc250-87b6-4a71-b434-fd33f80830b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Convert to Pandas DataFrame for visualization\n",
    "emissions_1_2_pd = emissions_1_2.toPandas()\n",
    "emissions_3_more_pd = emissions_3_more.toPandas()\n",
    "\n",
    "# Plotting\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.scatter(emissions_1_2_pd['Pickup_Date'], emissions_1_2_pd['Total_Emissions'], color='blue', alpha=0.5, label='1-2 Passengers')\n",
    "plt.scatter(emissions_3_more_pd['Pickup_Date'], emissions_3_more_pd['Total_Emissions'], color='green', alpha=0.5, label='3+ Passengers')\n",
    "plt.title('Daily CO2 Emissions by Passenger Count')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('CO2 Emissions (kg)')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4847970,
     "sourceId": 8187442,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.246297,
   "end_time": "2024-04-21T19:29:02.001104",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-21T19:28:56.754807",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
